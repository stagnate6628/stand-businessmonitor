--stupid autoupdater
if async_http.have_access() then
	local SCRIPT_VERSION = '0.0.6'
	local resp = false
	async_http.init(
		'https://raw.githubusercontent.com/stagnate6628/stand-businessmonitor/main/version',
		'',
		function(body, headers, status_code)
			if soup.version_compare(SCRIPT_VERSION, body) == -1 then
				menu.my_root():action(
					'Update Script',
					{},
					$"\"{body}\" is available, you are currently on \"{SCRIPT_VERSION}\".",
					function()
						async_http.init(
						'https://raw.githubusercontent.com/stagnate6628/stand-businessmonitor/main/BusinessMonitor.pluto',
						'',
						function(body_)
							local f = io.open(filesystem.scripts_dir() .. SCRIPT_RELPATH, 'wb')
							f:write(body_)
							f:close()
							util.restart_script()
						end)
						async_http.dispatch()
					end
				)
				menu.my_root():divider('')
			end
			resp = true
		end,
		function()
			resp = true
		end
	)
	async_http.dispatch()
	repeat
		util.yield()
	until resp
end

local function HUD_SET_TEXT_SCALE(scale, size) native_invoker.begin_call()native_invoker.push_arg_float(scale)native_invoker.push_arg_float(size)native_invoker.end_call_2(0x07C837F9A01C34C9)end
local function HUD_SET_TEXT_COLOUR(red, green, blue, alpha)native_invoker.begin_call()native_invoker.push_arg_int(red)native_invoker.push_arg_int(green)native_invoker.push_arg_int(blue)native_invoker.push_arg_int(alpha)native_invoker.end_call_2(0xBE6B23FFA53FB442)end
local function HUD_SET_TEXT_FONT(fontType)native_invoker.begin_call()native_invoker.push_arg_int(fontType)native_invoker.end_call_2(0x66E0276CC5F6B9DA)end
local function HUD_SET_TEXT_JUSTIFICATION(justifyType)native_invoker.begin_call()native_invoker.push_arg_int(justifyType)native_invoker.end_call_2(0x4E096588B13FFECA)end
local function HUD_SET_TEXT_WRAP(start, _end)native_invoker.begin_call()native_invoker.push_arg_float(start)native_invoker.push_arg_float(_end)native_invoker.end_call_2(0x63145D9C883A1A70)end
local function HUD_SET_TEXT_DROPSHADOW()native_invoker.begin_call()native_invoker.end_call_2(0x1CA3E9EAC9D93E5E)end
local function HUD_SET_TEXT_OUTLINE()native_invoker.begin_call()native_invoker.end_call_2(0x2513DFB0FB8400FE)end

enum class RendererMethod begin
	DirectX = 1,
	Native = 2
end
pluto_class Renderer
	method = RendererMethod.DirectX
end
local renderer = pluto_new Renderer()

local char_slot = util.get_char_slot()
local og_util_stat_get_int64 = util.stat_get_int64
util.stat_get_int64 = function(stat)
	return og_util_stat_get_int64($"MP{char_slot}_{stat}")
end

local x = 0
local y = 0

local width = 0.167
local height = 0.39

local gap_0 = 0.003
local align_0 = ALIGN_TOP_LEFT

local gap_1 = 0.11
local align_1 = ALIGN_TOP_RIGHT

local gap_2 = 0.16
local align_2 = ALIGN_TOP_RIGHT

local row_spacing = 0.0165
local text_size = 0.425

local background_colour = { r = 0, g = 0, b = 0, a = 0.8 }
local text_colour = { r = 1, g = 1, b = 1, a = 1 }
local max_colour = { r = 0, g = 1, b = 0, a = 1 }

local safe<const> = {
	{
		label = 'Nightclub',
		stat_1 = 'CLUB_POPULARITY',
		stat_2 = 'CLUB_SAFE_CASH_VALUE',
		max = 250_000,
		state = true
	},
	{
		label = 'Arcade',
		stat_2 = 'ARCADE_SAFE_CASH_VALUE',
		max = 100_000,
		state = true
	},
	{
		label = 'Agency',
		stat_2 = 'FIXER_SAFE_CASH_VALUE',
		max = 250_000,
		state = true
	}
}
local mapping<const> = {
    [1]  = 3,
    [2]  = 1,
    [3]  = 4,
    [4]  = 2,
    [5]  = 0,
    [6]  = 3,
    [7]  = 1,
    [8]  = 4,
    [9]  = 2,
    [10] = 0,
    [11] = 3,
    [12] = 1,
    [13] = 4,
    [14] = 2,
    [15] = 0,
    [16] = 3,
    [17] = 1,
    [18] = 4,
    [19] = 2,
    [20] = 0
}
local mc<const> = {
	[0] = { label = 'Forgery', max = 60, state = true },
	[1] = { label = 'Weed', max = 80, state = true },
	[2] = { label = 'Cash', max = 40, state = true },
	[3] = { label = 'Meth', max = 20, state = true },
	[4] = { label = 'Cocaine', max = 10, state = true },
	[5] = { label = 'Bunker', max = 100, state = true },
	[6] = { label = 'Acid Lab', max = 160, state = true }
}
local nc<const> = {
	{ label = 'Hub Cargo', max = 50, state = true },
	{ label = 'Hub Weapons', max = 100, state = true },
	{ label = 'Hub Cocaine', max = 10, state = true },
	{ label = 'Hub Meth', max = 20, state = true },
	{ label = 'Hub Weed', max = 80, state = true },
	{ label = 'Hub Forgery', max = 60, state = true },
	{ label = 'Hub Cash', max = 40, state = true }
}
local ceo<const> = {
	{ label = 'Warehouse 1', state = true },
	{ label = 'Warehouse 2', state = true },
	{ label = 'Warehouse 3', state = true },
	{ label = 'Warehouse 4', state = true },
	{ label = 'Warehouse 5', state = true }
}
local ceo_data<const> = {
    [1]  = { name = "Pacific Bait Storage",      max = 16 },
    [2]  = { name = "White Widow Garage",        max = 16 },
    [3]  = { name = "Celltowa Unit",             max = 16 },
    [4]  = { name = "Convenience Store Lockup",  max = 16 },
    [5]  = { name = "Foreclosed Garage",         max = 16 },
    [6]  = { name = "Xero Gas Factory",          max = 111 },
    [7]  = { name = "Derriere Lingerie Backlot", max = 42 },
    [8]  = { name = "Bilgeco Warehouse",         max = 111 },
    [9]  = { name = "Pier 400 Utility Building", max = 16 },
    [10] = { name = "GEE Warehouse",             max = 42 },
    [11] = { name = "LS Marine Building 3",      max = 42 },
    [12] = { name = "Railyard Warehouse",        max = 42 },
    [13] = { name = "Fridgit Annexe",            max = 42 },
    [14] = { name = "Disused Factory Outlet",    max = 42 },
    [15] = { name = "Discount Retail Unit",      max = 42 },
    [16] = { name = "Logistics Depot",           max = 111 },
    [17] = { name = "Darnell Bros Warehouse",    max = 111 },
    [18] = { name = "Wholesale Furniture",       max = 111 },
    [19] = { name = "Cypress Warehouses",        max = 111 },
    [20] = { name = "West Vinewood Backlot",     max = 111 },
    [21] = { name = "Old Power Station",         max = 42 },
    [22] = { name = "Walker & Sons Warehouse",   max = 111 }
}

local r = menu.my_root()
local toggle = r:toggle('Enable', {}, '', function() end, true)
local views = r:list('Views', {}, 'Configure what to monitor.')

do
	local safes_ = views:list('Safes')
	local mcs = views:list('MC Business')
	local hubs = views:list('Nightclub')
	local ceo_ = views:list('Special Cargo Warehouse(s)')

	for safe as v do
		safes_:toggle(v.label, {}, '', function(s)
			v.state = s
		end, v.state)
	end
	for mc as v do
		mcs:toggle(v.label, {}, '', function(s)
			v.state = s
		end, v.state)
	end
	for nc as v do
		hubs:toggle(v.label, {}, '', function(s)
			v.state = s
		end, v.state)
	end
	for ceo as v do
		ceo_:toggle(v.label, {}, '', function(s)
			v.state = s
		end, v.state)
	end

	r:divider('Configuration')

	r:list_select('Rendering Method', {}, 'How the monitor should be drawn.',
		{
			{ 'DirectX', {}, 'The default, not really any text customisation.' },
			{ 'Natives', {}, 'Uses rendering functions available to GTA, text is more customisable.' }
		},
		1,
		function(idx)
			switch idx do
				case RendererMethod.DirectX:
					renderer.method = RendererMethod.DirectX
				break
				case RendererMethod.Native:
					renderer.method = RendererMethod.Native
				break
		end
	end)

	local window = r:list('Window')
	window:slider_float('Width', {'bmwidth'}, '', 0, 10000, 167, 1, function(v)
		width = v / 1000
	end)
	window:slider_float('Height', {'bmheight'}, '', 0, 10000, 39, 1, function(v)
		height = v / 100
	end)

	local position = r:list('Position')
	position:slider_float('X Position', {'bmxpos'}, '', 0, 83, 67, 1, function(v)
		x = v / 100
	end)
	position:slider_float('Y Position', {'bmypos'}, '', 0, 71, 0, 1, function(v)
		y = v / 100
	end)
	position:slider_float('Label', {'bmlblpos'}, 'Aka. the "Property".', -1000, 1000, 3, 1, function(v)
		gap_0 = v / 1000
	end).precision = 4
	position:slider_float('Left Column', {'bmllblpos'}, 'Aka. "Supplies".', -66, 32, 11, 1, function(v)
		gap_1 = v / 100
	end).precision = 4
	position:slider_float('Right Column', {'bmrlblpos'}, 'Aka. "Product".', -68, 32, 16, 1, function(v)
		gap_2 = v / 100
	end).precision = 4

	local text = r:list('Text')
	text:slider_float('Scale', {'bmtxtscale'}, '', 0, 1000, 425, 1, function(v)
		text_size = v / 1000
	end).precision = 4
	text:slider_float('Row Spacing', {'bmrowspacing'}, '', 0, 1000, 165, 1, function(v)
		row_spacing = v / 10000
	end).precision = 4
	text:slider('Label', {}, 'The "Property" text alignment.', 0, 9, align_0, 1, function(idx)
		align_0 = idx
	end)
	text:slider('Left Column', {}, 'The "Supplies" text alignment.', 0, 9, align_1, 1, function(idx)
		align_1 = idx
	end)
	text:slider('Right Column', {}, 'The "Product" text alignment.', 0, 9, align_2, 1, function(idx)
		align_2 = idx
	end)

	local colours = r:list('Colours')
	colours:colour('Background Colour', {}, '', background_colour, true, function(c)
		background_colour = c
	end)
	colours:colour('Text Colour', {}, '', text_colour, false, function(c)
		text_colour = c
	end)
	colours:colour('Max Colour', {}, '', max_colour, false, function(c)
		max_colour = c
	end)
end

local tmp
local to_draw = {}

util.on_transition_finished(function()
	char_slot = util.get_char_slot()
end)

util.create_tick_handler(function()
	if toggle.value and util.is_session_started() then
		directx.draw_rect(x, y, width, height, background_colour)

		tmp = y
		to_draw = {}

		-- #region safes
		for k, v in safe do
			if not v.state then
				continue
			end

			tmp += row_spacing

			table.insert(to_draw, {
				x_pos = x + gap_0,
				y_pos = tmp,
				text = v.label,
				align = align_0,
				colour = text_colour
			})

			if v.stat_1 then
				local out = util.stat_get_int64(v.stat_1)
				if out then
					out = math.floor(out / 10)
				end

				table.insert(to_draw, {
					x_pos = x + gap_1,
					y_pos = tmp,
					text = $"{out}%",
					align = align_1,
					colour = text_colour
				})
			end

			local out = util.stat_get_int64(v.stat_2)

			table.insert(to_draw, {
				x_pos = x + gap_2,
				y_pos = tmp,
				text = out,
				align = align_2,
				colour = out == v.max ? max_colour : text_colour
			})
		end
		-- #endregion

		-- #region ceo
		for k, v in ceo do
			if not ceo[k].state then
				continue
			end

			local slot = util.stat_get_int64($"PROP_WHOUSE_SLOT{k-1}")
			if slot ~= 0 then
				tmp += row_spacing

				table.insert(to_draw, {
					x_pos = x + gap_0,
					y_pos = tmp,
					text = ceo_data[slot].name,
					align = align_0,
					colour = text_colour
				})

				local out = util.stat_get_int64($"contotalforwhouse{k-1}")
				local max = ceo_data[slot].max

				table.insert(to_draw, {
					x_pos = x + gap_2,
					y_pos = tmp,
					text = $"{out}/{max}",
					align = align_2,
					colour = out > max ? max_colour : text_colour
				})
			end
		end
		-- #endregion

		-- #region mc
		for k, v in mc do
			local curr
			if 0 <= k and k <= 4 then
				local p = util.stat_get_int64($"factoryslot{k}")
				local p_info = mapping[p]

				if not p_info or not mc[p_info].state then
					continue
				end
				curr = mc[p_info]
			else
				if not mc[k].state then
					continue
				end
				curr = mc[k]
			end

			tmp += row_spacing

			local s = util.stat_get_int64($"MATTOTALFORFACTORY{k}")
			local p = util.stat_get_int64($"PRODTOTALFORFACTORY{k}")

			table.insert(to_draw, {
				x_pos = x + gap_0,
				y_pos = tmp,
				text = curr.label,
				align = align_0,
				colour = text_colour
			})
			table.insert(to_draw, {
				x_pos = x + gap_1,
				y_pos = tmp,
				text = $"{s}%",
				align = align_1,
				colour = text_colour
			})
			table.insert(to_draw, {
				x_pos = x + gap_2,
				y_pos = tmp,
				text = $"{p}/" .. curr.max,
				align = align_2,
				colour = p == curr.max ? max_colour : text_colour
			})
		end
		-- #endregion

		-- #region nc
		for k, v in nc do
			if not v.state then
				continue
			end

			tmp += row_spacing

			local out = util.stat_get_int64($"HUB_PROD_TOTAL_{k-1}")

			table.insert(to_draw, {
				x_pos = x + gap_0,
				y_pos = tmp,
				text = v.label,
				align = align_0,
				colour = text_colour
			})
			table.insert(to_draw, {
				x_pos = x + gap_2,
				y_pos = tmp,
				text = $"{out}/" .. v.max,
				align = align_2,
				colour = out == v.max ? max_colour : text_colour
			})
		end
		-- #endregion

		for to_draw as v do
			directx.draw_text(
				v.x_pos,
				v.y_pos,
				v.text,
				v.align,
				text_size,
				v.colour
			)
		end
	end
	return true
end)