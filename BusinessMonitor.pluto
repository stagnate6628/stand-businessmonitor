--stupid autoupdater
if async_http.have_access() then
	local localVersion = '0.1.1'
	local resp = false
	async_http.init(
		'raw.githubusercontent.com/stagnate6628/stand-businessmonitor/main/version',
		nil,
		function(remoteVersion)
			if soup.version_compare(localVersion, remoteVersion) == -1 then
				menu.my_root():action(
					'Update Script',
					{},
					$'Version {remoteVersion} is now available.',
					function()
						async_http.init(
							'raw.githubusercontent.com/stagnate6628/stand-businessmonitor/main/BusinessMonitor.pluto',
							nil,
							function(scriptBody)
								local f = assert(io.open($'{filesystem.scripts_dir()}{SCRIPT_RELPATH}', 'wb'))
								assert(f:write(scriptBody))
								f:close()
								util.restart_script()
						end)
						async_http.dispatch()
					end
				)
			end
			resp = true
		end,
		function()
			resp = true
		end
	)
	async_http.dispatch()
	repeat
		util.yield()
	until resp
end

local directx, table, util = directx, table, util

local charSlot = util.get_char_slot()
local function readStat(stat)
	return util.stat_get_int64($'mp{charSlot}_{stat}')
end

local safeData<const> = {
	{
		label = 'Nightclub',
		supplyStat = 'club_popularity',
		productStat = 'club_safe_cash_value'
	},
	{
		label = 'Arcade',
		productStat = 'arcade_safe_cash_value'
	},
	{
		label = 'Agency',
		productStat = 'fixer_safe_cash_value'
	}
}
local mcData<const> = {
	[0] = { label = 'Forgery', max = 60 },
	[1] = { label = 'Weed', max = 80 },
	[2] = { label = 'Cash', max = 40 },
	[3] = { label = 'Meth', max = 20 },
	[4] = { label = 'Cocaine', max = 10 },
	[5] = { label = 'Bunker', max = 100 },
	[6] = { label = 'Acid Lab', max = 160 }
}
--0: forgery 1:weed 2:cash 3:meth 4:cocaine
local mc_property_map<const> = {
    [1]  = 3,
    [2]  = 1,
    [3]  = 4,
    [4]  = 2,
    [5]  = 0,
    [6]  = 3,
    [7]  = 1,
    [8]  = 4,
    [9]  = 2,
    [10] = 0,
    [11] = 3,
    [12] = 1,
    [13] = 4,
    [14] = 2,
    [15] = 0,
    [16] = 3,
    [17] = 1,
    [18] = 4,
    [19] = 2,
    [20] = 0
}
local ncData<const> = {
	[0] = { label = 'Hub Cargo', max = 50 },
	[1] = { label = 'Hub Weapons', max = 100 },
	[2] = { label = 'Hub Cocaine', max = 10 },
	[3] = { label = 'Hub Meth', max = 20 },
	[4] = { label = 'Hub Weed', max = 80 },
	[5] = { label = 'Hub Forgery', max = 60 },
	[6] = { label = 'Hub Cash', max = 40 }
}
local ceoData<const> = {
	{ label = 'Warehouse 1' },
	{ label = 'Warehouse 2' },
	{ label = 'Warehouse 3' },
	{ label = 'Warehouse 4' },
	{ label = 'Warehouse 5' }
}
local sc_warehouse_data<const> = {
    { label = 'Pacific Bait Storage', max = 16 },
    { label = 'White Widow Garage', max = 16 },
    { label = 'Celltowa Unit', max = 16 },
    { label = 'Convenience Store Lockup', max = 16 },
    { label = 'Foreclosed Garage', max = 16 },
    { label = 'Xero Gas Factory', max = 111 },
    { label = 'Derriere Lingerie Backlot', max = 42 },
    { label = 'Bilgeco Warehouse', max = 111 },
    { label = 'Pier 400 Utility Building', max = 16 },
    { label = 'GEE Warehouse', max = 42 },
    { label = 'LS Marine Building 3', max = 42 },
    { label = 'Railyard Warehouse', max = 42 },
    { label = 'Fridgit Annexe', max = 42 },
    { label = 'Disused Factory Outlet', max = 42 },
    { label = 'Discount Retail Unit', max = 42 },
    { label = 'Logistics Depot', max = 111 },
    { label = 'Darnell Bros Warehouse', max = 111 },
    { label = 'Wholesale Furniture', max = 111 },
    { label = 'Cypress Warehouses', max = 111 },
    { label = 'West Vinewood Backlot', max = 111 },
    { label = 'Old Power Station', max = 42 },
    { label = 'Walker & Sons Warehouse', max = 111 }
}

local xPos = 0.0
local yPos = 0.0
local textSize = 0.5
local showMax = true

local function createList(parent, name, data)
	local list = parent:list(name)
	for data as entry do
		list:toggle(entry.label, {}, '', function() end, true)
	end
	return list
end

local root = menu.my_root()

local backgroundColour = { r = 0, g = 0, b = 0, a = 0.8 }
local textColour = { r = 1, g = 1, b = 1, a = 1 }

local viewList = menu.my_root():list('Views')
local safeListChildren = createList(viewList, 'Safes', safeData):getChildren()
local mcListChildren = createList(viewList, 'MC Businesses', mcData):getChildren()
local ncListChildren = createList(viewList, 'Nightclub', ncData):getChildren()
local scListChildren = createList(viewList, 'Special Cargo Warehouse', ceoData):getChildren()

root:divider('Configuration')

do
	local positionList = root:list('Position')
	positionList:slider_float('X Position', {}, '', 0, 10000, 0, 1, function(value)
		xPos = value / 100
	end)
	positionList:slider_float('Y Position', {}, '', 0, 10000, 0, 1, function(value)
		yPos = value / 100
	end)
end

do
	local textList = root:list('Text')
	textList:slider_float('Scale', {}, '', 0, 10000, 50, 1, function(value)
		textSize = value / 100
	end)
	textList:toggle('Show Capacity Values', {}, '', function(s)
		showMax = s
	end, true)
end

do
	local colourList = root:list('Colour')
	local warnings = colourList:toggle('Contrast Warnings', {}, 'Shown in the help text for a colour.', function() end, true)

	local bgRef
	bgRef = colourList:colour('Background Colour', {}, '', backgroundColour.r, backgroundColour.g, backgroundColour.b, backgroundColour.a, true, function(colour, clickType)
		if clickType != CLICK_BULK and warnings.value then
			if not util.is_contrast_sufficient(
				backgroundColour.r, backgroundColour.g, backgroundColour.b,
				textColour.r, textColour.g, textColour.b
			) then
				bgRef.help_text = 'Text might be difficult to read with this colour.'
			else
				bgRef.help_text = ''
			end
		end
		backgroundColour = colour
	end)

	local txtRef
	txtRef = colourList:colour('Text Colour', {}, '', textColour.r, textColour.g, textColour.b, textColour.a, false, function(colour, clickType)
		if clickType != CLICK_BULK and warnings.value then
			if not util.is_contrast_sufficient(
				textColour.r, textColour.g, textColour.b,
				backgroundColour.r, backgroundColour.g, backgroundColour.b
			) then
				txtRef.help_text = 'Text might be difficult to read with this colour.'
			else
				txtRef.help_text = ''
			end
		end
		textColour = colour
	end)
end

local labels = {}
local supplies = {}
local product = {}

util.create_tick_handler(function()
	if util.is_session_started() then
		labels = {}
		supplies = {}
		product = {}
		for k, entry in safeData do
			if safeListChildren[k].value then
				table.insert(labels, entry.label)
				if entry.supplyStat then
					local value = readStat(entry.supplyStat)
					value = math.floor(value / 10)
					table.insert(supplies, $'{value}%')
				else
					table.insert(supplies, '')
				end
				table.insert(product, readStat(entry.productStat))
			end
		end
		for k, entry in mcData do
			local current
			if 0 <= k and k <= 4 then
				local slot = readStat($'factoryslot{k}')
				local propertyIdx = mc_property_map[slot]
				current = mcData[propertyIdx]

				if not mcListChildren[propertyIdx + 1].value then
					continue
				end
			else
				if not mcListChildren[k + 1].value then
					continue
				end
				current = mcData[k]
			end
			if current then
				table.insert(labels, current.label)
				table.insert(supplies, $'{readStat($'mattotalforfactory{k}')}%')
				table.insert(product, $'{readStat($'prodtotalforfactory{k}')}'.. (showMax ? '/' .. current.max : ''))
			end
		end
		for k, entry in ncData do
			if ncListChildren[k + 1].value then
				table.insert(labels, entry.label)
				table.insert(product, $'{readStat($'hub_prod_total_{k}')}' .. (showMax ? '/' .. entry.max : ''))
			end
		end
		for i = 0, 4 do
			local propertySlot = readStat($'prop_whouse_slot{i}')
			if propertySlot != 0 and scListChildren[i + 1].value then
				local entry = sc_warehouse_data[propertySlot]
				table.insert(labels, entry.label)
				table.insert(product, $'{readStat($'contotalforwhouse{i}')}' .. (showMax ? '/' .. entry.max : ''))
			end
		end

		do
			local labelText = table.concat(labels, '\n')
			local supplyText = table.concat(supplies, '\n')
			local productText = table.concat(product, '\n')

			local labelWidth, labelHeight = directx.get_text_size(labelText, textSize)
			local supplyWidth, supplyHeight = directx.get_text_size(supplyText, textSize)
			local productWidth, productHeight = directx.get_text_size(productText, textSize)

			directx.draw_rect(
				xPos,
				yPos,
				labelWidth + supplyWidth + productWidth + 0.02,
				math.max(labelHeight, supplyHeight, productHeight) + 0.02, --label/product height is guaranteed max?
				backgroundColour.r,
				backgroundColour.g,
				backgroundColour.b,
				backgroundColour.a
			)

			local yPad = yPos + 0.01
			directx.draw_text(
				xPos + 0.003,
				yPad,
				labelText,
				ALIGN_TOP_LEFT,
				textSize,
				textColour.r,
				textColour.g,
				textColour.b,
				textColour.a
			)
			directx.draw_text(
				xPos + labelWidth + supplyWidth + 0.005,
				yPad,
				supplyText,
				ALIGN_TOP_RIGHT,
				textSize,
				textColour.r,
				textColour.g,
				textColour.b,
				textColour.a
			)
			directx.draw_text(
				xPos + labelWidth + supplyWidth + productWidth + 0.013,
				yPad,
				productText,
				ALIGN_TOP_RIGHT,
				textSize,
				textColour.r,
				textColour.g,
				textColour.b,
				textColour.a
			)
		end
	end
	return true
end)