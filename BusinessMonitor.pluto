local SCRIPT_VERSION = '0.0.6'
local resp = false
async_http.init(
	'https://raw.githubusercontent.com/stagnate6628/stand-businessmonitor/0.0.6/version',
	'',
	function(body, headers, status_code)
		if soup.version_compare(SCRIPT_VERSION, body) == -1 then
			menu.my_root():action(
				'Update Script',
				{},
				$'"{body}" is available, you are currently on "{SCRIPT_VERSION}".',
				function()
					async_http.init(
					'https://raw.githubusercontent.com/stagnate6628/stand-businessmonitor/0.0.6/BusinessMonitor.pluto',
					'',
					function(body_)
						local f = io.open(filesystem.scripts_dir() .. SCRIPT_RELPATH, 'wb')
						f:write(body_)
						f:close()
						util.restart_script()
					end)
					async_http.dispatch()
				end
			)
			menu.my_root():divider('')
		end
		resp = true
	end,
	function()
		resp = true
	end
)
async_http.dispatch()
repeat
	util.yield()
until resp

local char_slot = util.get_char_slot()
local og_util_stat_get_int64 = util.stat_get_int64
util.stat_get_int64 = function(stat)
	return og_util_stat_get_int64($'MP{char_slot}_{stat}')
end

local x = 0.67
local y = 0

local width = 0.167
local height = 0.31

local alignments<const> = {
	'ALIGN_TOP_LEFT', 'ALIGN_TOP_CENTRE', 'ALIGN_TOP_RIGHT',
	'ALIGN_CENTRE_LEFT', 'ALIGN_CENTRE', 'ALIGN_CENTRE_RIGHT',
	'ALIGN_BOTTOM_LEFT', 'ALIGN_BOTTOM_CENTRE', 'ALIGN_BOTTOM_RIGHT'
}

local gap_0 = 0.003
local align_0 = ALIGN_TOP_LEFT

local gap_1 = 0.11
local align_1 = ALIGN_TOP_RIGHT

local gap_2 = 0.16
local align_2 = ALIGN_TOP_RIGHT

local row_spacing = 0.0165
local text_size = 0.425

local background_colour = { r = 0, g = 0, b = 0, a = 0.8 }
local text_colour = { r = 1, g = 1, b = 1, a = 1 }
local max_colour = { r = 0, g = 1, b = 0, a = 1 }

local safe<const> = {
	{
		label = 'Nightclub',
		stat_1 = 'CLUB_POPULARITY',
		stat_2 = 'CLUB_SAFE_CASH_VALUE',
		max = 250_000,
		state = true
	},
	{
		label = 'Arcade',
		stat_2 = 'ARCADE_SAFE_CASH_VALUE',
		max = 100_000,
		state = true
	},
	{
		label = 'Agency',
		stat_2 = 'FIXER_SAFE_CASH_VALUE',
		max = 250_000,
		state = true
	}
}
local mapping<const> = {
    [1]  = 3,
    [2]  = 1,
    [3]  = 4,
    [4]  = 2,
    [5]  = 0,
    [6]  = 3,
    [7]  = 1,
    [8]  = 4,
    [9]  = 2,
    [10] = 0,
    [11] = 3,
    [12] = 1,
    [13] = 4,
    [14] = 2,
    [15] = 0,
    [16] = 3,
    [17] = 1,
    [18] = 4,
    [19] = 2,
    [20] = 0
}
local mc<const> = {
	[0] = { label = 'Forgery', max = 60, state = true },
	[1] = { label = 'Weed', max = 80, state = true },
	[2] = { label = 'Cash', max = 40, state = true },
	[3] = { label = 'Meth', max = 20, state = true },
	[4] = { label = 'Cocaine', max = 10, state = true },
	[5] = { label = 'Bunker', max = 100, state = true },
	[6] = { label = 'Acid Lab', max = 160, state = true }
}
local nc<const> = {
	{ label = 'Hub Cargo', max = 50, state = true },
	{ label = 'Hub Weapons', max = 100, state = true },
	{ label = 'Hub Cocaine', max = 10, state = true },
	{ label = 'Hub Meth', max = 20, state = true },
	{ label = 'Hub Weed', max = 80, state = true },
	{ label = 'Hub Forgery', max = 60, state = true },
	{ label = 'Hub Cash', max = 40, state = true }
}

local r = menu.my_root()
local toggle = r:toggle('Enable', {}, '', function() end, true)
local views = r:list('Views', {}, 'Configure what to monitor.')

do
	local safes_ = views:list('Safes')
	local mcs = views:list('MC Business')
	local hubs = views:list('Nightclub')

	for safe as v do
		safes_:toggle(v.label, {}, '', function(s)
			v.state = s
		end, v.state)
	end
	for mc as v do
		mcs:toggle(v.label, {}, '', function(s)
			v.state = s
		end, v.state)
	end
	for nc as v do
		hubs:toggle(v.label, {}, '', function(s)
			v.state = s
		end, v.state)
	end

	r:divider('Configuration')

	local window = r:list('Window')
	window:slider_float('Width', {'bmwidth'}, '', 0, 10000, 167, 1, function(v)
		width = v / 1000
	end)
	window:slider_float('Height', {'bmheight'}, '', 0, 10000, 31, 1, function(v)
		height = v / 100
	end)

	local position = r:list('Position')
	position:slider_float('X Position', {'bmxpos'}, '', 0, 83, 67, 1, function(v)
		x = v / 100
	end)
	position:slider_float('Y Position', {'bmypos'}, '', 0, 71, 0, 1, function(v)
		y = v / 100
	end)
	position:slider_float('Label', {'bmlblpos'}, 'Aka. the "Property".', -1000, 1000, 3, 1, function(v)
		gap_0 = v / 1000
	end).precision = 4
	position:slider_float('Left Column', {'bmllblpos'}, 'Aka. "Supplies".', -66, 32, 11, 1, function(v)
		gap_1 = v / 100
	end).precision = 4
	position:slider_float('Right Column', {'bmrlblpos'}, 'Aka. "Product".', -68, 32, 16, 1, function(v)
		gap_2 = v / 100
	end).precision = 4

	local text = r:list('Text')
	text:slider_float('Scale', {'bmtxtscale'}, '', 0, 1000, 425, 1, function(v)
		text_size = v / 1000
	end).precision = 4
	text:slider_float('Row Spacing', {'bmrowspacing'}, '', 0, 1000, 165, 1, function(v)
		row_spacing = v / 10000
	end).precision = 4
	text:list_select('Label', {}, 'The "Property" text alignment.', alignments, 1, function(idx)
		align_0 = idx
	end)
	text:list_select('Left Column', {}, 'The "Supplies" text alignment.', alignments, 3, function(idx)
		align_1 = idx
	end)
	text:list_select('Right Column', {}, 'The "Product" text alignment.', alignments, 3, function(idx)
		align_2 = idx
	end)

	local colours = r:list('Colours')
	colours:colour('Background Colour', {}, '', background_colour, true, function(c)
		background_colour = c
	end)
	colours:colour('Text Colour', {}, '', text_colour, false, function(c)
		text_colour = c
	end)
	colours:colour('Max Colour', {}, '', max_colour, false, function(c)
		max_colour = c
	end)
end

local tmp
local to_draw = {}

util.on_transition_finished(function()
	char_slot = util.get_char_slot()
end)

util.create_tick_handler(function()
	while not util.is_session_started() or util.is_session_transition_active() do
		util.yield_once()
	end

	if toggle.value then
		directx.draw_rect(x, y, width, height, background_colour)

		tmp = y
		to_draw = {}

		for k, v in safe do
			if not v.state then
				continue
			end

			tmp += row_spacing

			table.insert(to_draw, {
				x_pos = x + gap_0,
				y_pos = tmp,
				text = v.label,
				align = align_0,
				size = text_size,
				colour = text_colour
			})

			if v.stat_1 then
				local out = util.stat_get_int64(v.stat_1)
				out = math.floor(out / 10)

				table.insert(to_draw, {
					x_pos = x + gap_1,
					y_pos = tmp,
					text = $'{out}%',
					align = align_1,
					size = text_size,
					colour = text_colour
				})
			end

			local out = util.stat_get_int64(v.stat_2)

			table.insert(to_draw, {
				x_pos = x + gap_2,
				y_pos = tmp,
				text = out,
				align = align_2,
				size = text_size,
				colour = out == v.max ? max_colour : text_colour
			})
		end

		for k, v in mc do
			local curr
			if 0 <= k and k <= 4 then
				local p = util.stat_get_int64($'factoryslot{k}')
				local p_info = mapping[p]

				if not p_info or not mc[p_info].state then
					continue
				end
				curr = mc[p_info]
			else
				if not mc[k].state then
					continue
				end
				curr = mc[k]
			end

			tmp += row_spacing

			local s = util.stat_get_int64($'MATTOTALFORFACTORY{k}')
			local p = util.stat_get_int64($'PRODTOTALFORFACTORY{k}')

			table.insert(to_draw, {
				x_pos = x + gap_0,
				y_pos = tmp,
				text = curr.label,
				align = align_0,
				size = text_size,
				colour = text_colour
			})
			table.insert(to_draw, {
				x_pos = x + gap_1,
				y_pos = tmp,
				text = $'{s}%',
				align = align_1,
				size = text_size,
				colour = text_colour
			})
			table.insert(to_draw, {
				x_pos = x + gap_2,
				y_pos = tmp,
				text = $'{p}/' .. curr.max,
				align = align_2,
				size = text_size,
				colour = p == curr.max ? max_colour : text_colour
			})
		end

		for k, v in nc do
			if not v.state then
				continue
			end

			tmp += row_spacing

			local out = util.stat_get_int64('HUB_PROD_TOTAL_' .. k-1)

			table.insert(to_draw, {
				x_pos = x + gap_0,
				y_pos = tmp,
				text = v.label,
				align = align_0,
				size = text_size,
				colour = text_colour
			})
			table.insert(to_draw, {
				x_pos = x + gap_2,
				y_pos = tmp,
				text = $'{out}/' .. v.max,
				align = align_2,
				size = text_size,
				colour = out == v.max ? max_colour : text_colour
			})
		end

		for to_draw as v do
			directx.draw_text(
				v.x_pos,
				v.y_pos,
				v.text,
				v.align,
				v.size,
				v.colour
			)
		end
	end
	return true
end)